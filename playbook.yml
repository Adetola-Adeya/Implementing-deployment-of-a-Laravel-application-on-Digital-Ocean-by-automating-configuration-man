---
- name: Deploying a Laravel App with Ansible Playbook
  hosts: webservers
  become: true
  remote_user: root

  tasks:

    - name: Update Apt Repository
      apt: update_cache=yes cache_valid_time=3600
    - name: Upgrade The Apt Repository'
      apt: upgrade=yes cache_valid_time=3600
    - name: Install (git, apache2 unzip, curl, wget)
      apt:
        pkg:
        - git
        - apache2
        - unzip
        - curl
        - wget

    - name: Add Apt Repo for PHP
      command: add-apt-repository ppa:ondrej/php -y

    - name: Install Dependencies for PHP
      command: apt install software-properties-common -y

    - name: Install PHP Modules
      apt:
        name:
        - php
        - libapache2-mod-php
        - php8.1-zip
        - php8.1-mbstring
        - php8.1-mysql
        - php8.1-gd
        - php8.1-dev
        - php8.1-curl
        - php8.1-xml
        - php8.1-cli
        - php8.1-common
        - php8.1-pgsql
        - php8.1-mysql

# firewall


    - name: Install UFW
      apt:
        name: ufw
        state: present

    - name: Allow OpenSSH
      ufw:
        name: OpenSSH
        rule: allow

    - name: Allow Apache
      ufw:
        name: Apache
        rule: allow

    - name: Allow port 80 HTTP
      ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Allow port 443 HTTPS
      ufw:
        rule: allow
        port: "443"

    - name: Allow port 22 SSH
      ufw:
        rule: allow
        port: "22"
        proto: tcp

    - name: Allow port 3306 MySQL
      ufw:
        rule: allow
        port: "3306"

    - name: Allow port 5432 (PostgreSQL)
      ufw:
        port: '5432'
        rule: allow

    - name: Enable UFW
      ufw: state=enabled policy=allow

    - name: Copy the PostgreSQL Script
      copy:
       src: bashscript.sh
       dest: /root
       mode: '0775'
       owner: root
       group: root

    - name: Execute the PostgreSQL Script
      command: sh /root/bashscript.sh

    - name: start apache2
      service:
        name: apache2
        state: started
        enabled: yes


    - name: Install Python3
      apt: name=python3 state=latest

    - name: Install Pip
      apt: name=pip state=latest

    - name: Update Apt Repository
      apt: update_cache=yes cache_valid_time=3600
    - name: Upgrade The Apt Repository'
      apt: upgrade=yes cache_valid_time=3600


    - name: Install MySQL Server
      apt:
        name: mysql-server
        state: latest

    - name: Install MySQL Client
      apt:
        name: mysql-client
        state: latest

        - name: Install PyMySQL Library
      pip:
        name: pymysql
        state: latest

    - name: Start MySQL
      service:
       name: mysql
       state: started
       enabled: true

    - name: location for the creation of the sql query
      command:  mysql -u root --execute="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '"{{ mysql_root_password }}"';"

    - name: Create ~/.my.cnf
      file:
        path: ~/.my.cnf
        state: touch

    - name: Insert into ~/.my.cnf
      blockinfile:
        path: ~/.my.cnf
        block: |
          [client]
          user={{ mysql_user }}
          password={{ mysql_root_password }}

    - name: the sql query flush privileges
      command:  mysql -u root --execute="FLUSH PRIVILEGES"

    - name: Creating a User for the Database
      mysql_user:
       login_user: 'root'
       login_password: "{{ mysql_root_password }}"
       name: "{{ db_user }}"
       password: "{{ user_pass }}"
       host: localhost
       priv: '{{ db_name }}.*:ALL,GRANT'

    - name: Creating the Database
      mysql_db:
       login_user: 'root'
       login_password: "{{ mysql_root_password }}"
       name: "{{ db_name }}"
       state: present

    - name: Restart MySQL
      service: name=mysql state=restarted


#Composer
    - name: Download Composer Installer
      command: curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php

    - name: Verify Installation Script is Safe to Run
      command: php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51>

    - name: Install Composer Globally
       command: sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer

    - name: Make composer executable by user
      file:
       path: /usr/local/bin/composer
       mode: u+x

    - name: Clone the project repo into a new directory
      command: git clone https://github.com/f1amy/laravel-realworld-example-app.git

    - name: Move repo to the right directory
      command: mv /root/laravel-realworld-example-app /var/www/html/laravelpostgre

    - name: Giving right permissions to File
      file:
       path: /var/www/html/laravelpostgre
       recurse: yes
       owner: root
       group: root

    - name: changing owner of laravelpostgre
      file:
       path: /var/www/html/laravelpostgre
       state: directory
       recurse: yes
       owner: www-data
       group: www-data
       mode: '0775'

    - name: set permissions for laravelpostgre storage
      file:
       path: /var/www/html/laravelpostgre/storage
       state: directory
       recurse: yes
       owner: www-data
       group: www-data
       mode: '0775'
       
       
    - name: Change file permission of bootstrap cache
      file:
       path: /var/www/html/laravelpostgre/bootstrap/cache
       state: directory
       recurse: yes
       owner: www-data
       group: www-data
       mode: '0775'


    - name: Copying .env file
      command: cp /var/www/html/laravelpostgre/.env.example /var/www/html/laravelpostgre/.>

    - name: Create an apache virtual host configuration file
      ansible.builtin.copy:
       dest: /var/www/html/laravelpostgre/.env
       content: |
        APP_NAME="Laravel Postgresql App"
        APP_ENV=local
        APP_KEY=
        APP_DEBUG=true
        APP_URL=http://178.128.171.245
        APP_PORT=3000

        LOG_CHANNEL=stack
        LOG_DEPRECATIONS_CHANNEL=null
        LOG_LEVEL=debug

        DB_CONNECTION=mysql
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_DATABASE="{{ db_name }}"
        DB_USERNAME=root
        DB_PASSWORD="{{ mysql_root_password }}"

        BROADCAST_DRIVER=log
        CACHE_DRIVER=file
        FILESYSTEM_DISK=local
        QUEUE_CONNECTION=sync
        SESSION_DRIVER=file
        SESSION_LIFETIME=120
        MEMCACHED_HOST=127.0.0.1
        REDIS_HOST=127.0.0.1
        REDIS_PASSWORD=null
        REDIS_PORT=6379
        MAIL_MAILER=smtp
        MAIL_HOST=mailhog
        MAIL_PORT=1025
        MAIL_USERNAME=null
        MAIL_PASSWORD=null
        MAIL_ENCRYPTION=null
        MAIL_FROM_ADDRESS="hello@example.com"
        MAIL_FROM_NAME="${APP_NAME}"
        
        AWS_ACCESS_KEY_ID=
        AWS_SECRET_ACCESS_KEY=
        AWS_DEFAULT_REGION=us-east-1
        AWS_BUCKET=
        AWS_USE_PATH_STYLE_ENDPOINT=false

        PUSHER_APP_ID=
        PUSHER_APP_KEY=
        PUSHER_APP_SECRET=
        PUSHER_APP_CLUSTER=mt1

        MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
        MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

        L5_SWAGGER_GENERATE_ALWAYS=true
        SAIL_XDEBUG_MODE=develop,debug
        SAIL_SKIP_CHECKS=true

    - name: Create the web.php file in the routes directory
      ansible.builtin.copy:
        dest: /var/www/html/laravelpostgre/routes/web.php
        content: |
                 <?php

                 Route::get('/', function () {

                   return view('welcome');
                 });

    - name: download and install all requirements in the /var/www/html/laravelpostgre/c>
      shell: composer install --no-interaction
      args:
       chdir: /var/www/html/laravelpostgre

    - name: generate app key
      ansible.builtin.shell: php artisan key:generate
      args:
       chdir: /var/www/html/laravelpostgre

    - name: Run the php artisan:cache
      ansible.builtin.shell: php artisan config:cache
      args:
       chdir: /var/www/html/laravelpostgre

    - name: Run the php artisan:fresh
      ansible.builtin.shell: php artisan migrate:fresh
      args:
       chdir: /var/www/html/laravelpostgre

    - name: Run the php artisan seed
      ansible.builtin.shell: php artisan migrate --seed
      args:
       chdir: /var/www/html/laravelpostgre

    - name: Create an apache virtual host configuration file
      ansible.builtin.copy:
       dest: /etc/apache2/sites-available/laravelpostgre.conf
       content: |
        <VirtualHost *:80>
          ServerAdmin contact@examserver.adetolaolubunmi.me
          ServerName examserver.adetolaolubunmi.me
          DocumentRoot /var/www/html/laravelpostgre/public
          <Directory /var/www/html/laravelposgre/public>
          AllowOverride All
          </Directory>
          ErrorLog ${APACHE_LOG_DIR}/error.log
          CustomLog ${APACHE_LOG_DIR}/access.log combined
        </VirtualHost>

    - name: Disable default apache page and enable laravel page
      ansible.builtin.command: a2dissite 000-default.conf

    - name: Enable a2enmod rewrite
      ansible.builtin.command: a2enmod rewrite

    - name: Enable laravel page
      ansible.builtin.command: a2ensite laravelpostgre.conf

    - name: Restart apache web server
      ansible.builtin.command: systemctl reload apache2
